AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Debezium-Lakehouse project'

Parameters:
  ProjectName:
    Type: String
    Default: debezium-lakehouse
    Description: Project name for resource tagging

  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for VPC

  PrivateSubnet1CIDR:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR block for private subnet 1

  PrivateSubnet2CIDR:
    Type: String
    Default: 10.0.2.0/24
    Description: CIDR block for private subnet 2
  
  DBUsername:
    Type: String
    Default: postgres
    Description: Database admin username

  DBPassword:
    Type: String
    Default: postgres
    Description: Database admin password

Resources:
  # VPC and Networking
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-vpc

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-private-subnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-private-subnet-2

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-public-subnet

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-public-routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-private-routes

  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # Aurora PostgreSQL
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for Aurora PostgreSQL
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

   # Security group 
  ProjectSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all Debezium-Lakehouse components
      VpcId: !Ref VPC
      SecurityGroupIngress:
        # PostgreSQL
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: !Ref VpcCIDR
        # Kafka
        - IpProtocol: tcp
          FromPort: 9092
          ToPort: 9092
          CidrIp: !Ref VpcCIDR

  # Add self-reference after creation
  ProjectSecurityGroupSelfIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ProjectSecurityGroup
      IpProtocol: -1  # All protocols
      SourceSecurityGroupId: !Ref ProjectSecurityGroup



  AuroraDBCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      Engine: aurora-postgresql
      EngineVersion: 16.6
      DatabaseName: inventory
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref DBSubnetGroup
      VpcSecurityGroupIds:
        - !Ref ProjectSecurityGroup  # Using the single security group
      EnableIAMDatabaseAuthentication: false
      StorageEncrypted: true
      DeletionProtection: false
      DBClusterParameterGroupName: !Ref RDSDBClusterParameterGroup

  AuroraDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t3.medium
      Engine: aurora-postgresql
      DBClusterIdentifier: !Ref AuroraDBCluster
      PubliclyAccessible: false

  RDSDBClusterParameterGroup:
    Type: 'AWS::RDS::DBClusterParameterGroup'
    Properties:
      Family: aurora-postgresql16
      Description: Enable logical replication
      Parameters:
        rds.logical_replication: '1'


  # MSK Cluster
  MSKCluster:
    Type: AWS::MSK::Cluster
    Properties:
      ClusterName: !Sub ${ProjectName}-msk
      KafkaVersion: 3.7.x
      NumberOfBrokerNodes: 4
      BrokerNodeGroupInfo:
        InstanceType: kafka.t3.small
        ClientSubnets:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroups:
        - !Ref ProjectSecurityGroup  # Using the single security group
        StorageInfo:
          EBSStorageInfo:
            VolumeSize: 100
      ConfigurationInfo:
        Arn: !Ref MSKConfiguration
        Revision: 1

  MSKConfiguration:
    Type: AWS::MSK::Configuration
    Properties:
      Name: !Sub ${ProjectName}-msk-config
      ServerProperties: |
        auto.create.topics.enable=true
        delete.topic.enable=true
        num.partitions=3
        default.replication.factor=2

  # Glue Python Shell Job
  GlueRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: glue.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole

  GlueScript:
    Type: AWS::Glue::Job
    Properties:
      Command:
        Name: pythonshell
        PythonVersion: '3.9'
        ScriptLocation: !Sub 's3://${S3Bucket}/data_producer.py'
      DefaultArguments:
        '--TempDir': !Sub 's3://${S3Bucket}/temporary/'
        '--job-language': 'python'
        '--connections': !Ref GlueAuroraConnection
      ExecutionProperty:
        MaxConcurrentRuns: 1
      MaxRetries: 0
      Name: !Sub ${ProjectName}-data-producer
      Role: !GetAtt GlueRole.Arn

  GlueAuroraConnection:
    Type: AWS::Glue::Connection
    Properties:
      CatalogId: !Ref AWS::AccountId
      ConnectionInput:
        Name: !Sub "${ProjectName}-aurora-connection"
        Description: "Connection to Aurora PostgreSQL for Glue jobs"
        ConnectionType: "JDBC"
        ConnectionProperties:
          JDBC_CONNECTION_URL: !Join 
            - ''
            - - "jdbc:postgresql://"
              - !GetAtt AuroraDBCluster.Endpoint.Address
              - ":3306/inventory"
          USERNAME: !Ref DBUsername
          PASSWORD: !Ref DBPassword
        PhysicalConnectionRequirements:
          AvailabilityZone: !Select [0, !GetAZs '']
          SecurityGroupIdList:
            - !Ref ProjectSecurityGroup
          SubnetId: !Ref PrivateSubnet1


  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${ProjectName}-${AWS::AccountId}-${AWS::Region}
      VersioningConfiguration:
        Status: Suspended

  # MSK Connect
MSKConnectRole:
  Type: AWS::IAM::Role
  Properties:
    AssumeRolePolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: Allow
          Principal:
            Service: kafkaconnect.amazonaws.com
          Action: sts:AssumeRole
    Policies:
      - PolicyName: GlueFullAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - glue:*
              Resource: 
                - !Sub arn:aws:glue:${AWS::Region}:${AWS::AccountId}:catalog
                - !Sub arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/*
                - !Sub arn:aws:glue:${AWS::Region}:${AWS::AccountId}:table/*
      - PolicyName: S3BucketAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:*
              Resource:
                - !Sub arn:aws:s3:::${S3Bucket}
                - !Sub arn:aws:s3:::${S3Bucket}/*
    ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonTablesS3FullAccess


Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref VPC

  PrivateSubnet1Id:
    Description: Private Subnet 1 ID
    Value: !Ref PrivateSubnet1

  PrivateSubnet2Id:
    Description: Private Subnet 2 ID
    Value: !Ref PrivateSubnet2

  AuroraClusterEndpoint:
    Description: Aurora Cluster Endpoint
    Value: !GetAtt AuroraDBCluster.Endpoint.Address

  GlueConnectionName:
    Description: Glue Connection to Aurora
    Value: !Ref GlueAuroraConnection
